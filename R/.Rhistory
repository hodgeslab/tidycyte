nDecr <- 20;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
highLevel <- 2.5
lowLevel <- -2.5
mu <- 0
sd <- 1
len <- 100
nIncr <- 20;
nDecr <- 20;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
highLevel <- 2.5
lowLevel <- -2.5
mu <- 0
sd <- 1
len <- 5
nIncr <- 20;
nDecr <- 20;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
highLevel <- 2.5
lowLevel <- -2.5
mu <- 0
sd <- 1
len <- 10
nIncr <- 20;
nDecr <- 20;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
len <- 20
nIncr <- 20;
nDecr <- 20;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
nIncr <- 20;
nDecr <- 30;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
highLevel <- 3
lowLevel <- -3
mu <- 0
sd <- 1
len <- 20
nIncr <- 20;
nDecr <- 30;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = F, border_color = NA)
nIncr <- 20;
nDecr <- 30;
nUnch <- 60;
templateIncr <- seq(lowLevel,highLevel,length.out=len)
templateDecr <- seq(highLevel,lowLevel,length.out=len)
templateUnch <- rep(0,len)
matIncr <- matrix(templateIncr,nrow = nIncr,ncol = len,byrow = T)
matDecr <- matrix(templateDecr,nrow = nDecr,ncol = len,byrow = T)
matUnch <- matrix(templateUnch,nrow = nUnch,ncol = len,byrow = T)
matIncr <- matIncr + rnorm(nIncr*len, mean = mu, sd = sd)
matDecr <- matDecr + rnorm(nDecr*len, mean = mu, sd = sd)
matUnch <- matUnch + rnorm(nUnch*len, mean = mu, sd = sd)
mat <- rbind(matIncr, matDecr, matUnch)
pheatmap(mat, cluster_cols = F, cluster_rows=F, legend = T, border_color = NA)
setwd("~/")
?rand
?sample
sample(10)
mtcars
t.test(mtcars$mpg,mtcars$cyl)
res <- t.test(mtcars$mpg,mtcars$cyl)
res
res$p.value
res <- t.test(mtcars$mpg[1:10],mtcars$mpg[11:15])
res
?pdf
library(DESeq)
library(DESeq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
install.packages("BiocManager")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages("installr")
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(hodgeslabR)
install.packages("devtools")
library(devtools)
install_github('hodgeslab/hodgeslabR')
library(DESeq2)
airmiles
library(pasilla)
BiocManager::install("pasilla")
library(pasilla)
?pasilla
??pasilla
data("pasillaExons")
pasillaExons
BiocManager::install("DEXSeq")
pasillaExons
data("pasillaExons")
datafile <-  system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
count.table<-  read.table( datafile, header=TRUE, row.names=1, quote="", comment.char="" )
cond.type <-  c( "untreated", "untreated", "untreated","untreated", "treated", "treated", "treated" )
lib.type  <-  c( "single-end", "single-end", "paired-end", "paired-end", "single-end", "paired-end", "paired-end" )
count.table
dataFilesDir = system.file("extdata", package = "pasilla", mustWork=TRUE)
pasillaSampleAnno = read.csv(file.path(dataFilesDir, "pasilla_sample_annotation.csv"))
pasillaGenes
library("pasillaGenes")
data("pasillaGenes")
library("Biobase")
data("pasillaGenes")
counts(count.table)
library("Biobase")
library("pasilla")
data("pasillaGenes")
pasillaGenes
library(pasilla)
pasillaGenes
data("pasillaGenes")
library(DESeq)
pasillaGenes
BiocManager::DESeq
BiocManager::install("DESeq")
pasillaGenes
data("pasillaGenes")
pasillaGenes
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
countData
colData
library(DESeq2)
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
head(countData)
countData
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
head(colData)
dim(countData)
head(countData)
rownames(countData)
tail(rowwnames(countData))
tail(rownames(countData))
rownames(countData[rownames(countData) ~= 'FBgn01'])
rownames(countData[rownames(countData) ~ 'FBgn01'])
rownames(countData[rownames(countData) =~ 'FBgn01'])
rownames(countData[rownames(countData) =~ 'FBgn01*'])
rownames(countData[rownames(countData) ~ 'FBgn01*'])
grep(FBgn01,rownames(countData))
grep(rownames(countData),'FBgn01')
grep('FBgn01',rownames(countData))
grep('FBgn02',rownames(countData))
grep('FBgn005',rownames(countData))
grep('FBgn021',rownames(countData))
grep('FBgn022',rownames(countData))
grep('FBgn023',rownames(countData))
grep('FBgn025',rownames(countData))
grep('FBgn024',rownames(countData))
coundData[grep('FBgn024',rownames(countData)), ]
countData[grep('FBgn024',rownames(countData)), ]
countData <- cbind(countData,countData)
head(countData)
colData
colData <- rbind(coldData,colData)
colData <- rbind(colData,colData)
colData
colData$group <- c(rep("A",7), rep("B",7))
colData
selectData == colData$condition == "treated" & colData$group == "B"
selectData <- colData$condition == "treated" & colData$group == "B"
selectData
countData[grep('FBgn024',rownames(countData)), select] <- 3 * countData[grep('FBgn024',rownames(countData)), select]
select <- colData$condition == "treated" & colData$group == "B"
countData[grep('FBgn024',rownames(countData)), select] <- 3 * countData[grep('FBgn024',rownames(countData)), select]
dim(countData)
countData[, select] <- max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10)))
pCol
colData
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition + group + condition:group)
colnames(countData)[8:14] <- paste0(colnames(countData)[8:14],"1")
head(countData)
countData <- cbind(countData,countData)
colnames(countData)[8:14] <- paste0(colnames(countData)[8:14],"1")
colData <- rbind(colData,colData)
colData$group <- c(rep("A",7), rep("B",7))
select <- colData$condition == "treated" & colData$group == "B"
countData[grep('FBgn024',rownames(countData)), select] <- 3 * countData[grep('FBgn024',rownames(countData)), select]
select <- colData$group == "B"
countData[, select] <- max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10)))
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition + group + condition:group)
colData
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
# make augmented dataset
countData <- cbind(countData,countData)
colnames(countData)[8:14] <- paste0(colnames(countData)[8:14],"1")
colData <- rbind(colData,colData)
colData$group <- c(rep("A",7), rep("B",7))
select <- colData$condition == "treated" & colData$group == "B"
countData[grep('FBgn024',rownames(countData)), select] <- 3 * countData[grep('FBgn024',rownames(countData)), select]
select <- colData$group == "B"
countData[, select] <- max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10
)))
colData
head(countData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition + group + condition:group)
floor(rnorm(dim(countData)[1],0,10)
)
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
# make augmented dataset
countData <- cbind(countData,countData)
colnames(countData)[8:14] <- paste0(colnames(countData)[8:14],"1")
colData <- rbind(colData,colData)
colData$group <- c(rep("A",7), rep("B",7))
select <- colData$condition == "treated" & colData$group == "B"
countData[grep('FBgn024',rownames(countData)), select] <- 3 * countData[grep('FBgn024',rownames(countData)), select]
select <- colData$group == "B"
max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10)))
rowMax(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10)))
countData[, select] + floor(rnorm(dim(countData)[1],0,10))
apply(1, max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10))))
apply(1, max(0, countData[, select] + floor(rnorm(dim(countData)[1],0,10))))
countData[, select] <- countData[, select] + floor(rnorm(dim(countData)[1],0,10))
countData
head(countData)
countData[countData < 0] <- 0
head(countData)
colData$group <- factor(colData$group, levels = c("A","B"))
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition + group + condition:group)
dds <- DESeq(dds)
res <- results(dds)
res <- results(dds)
head(res)
?results
res[order(res$padj)]
res[order(res$padj), ]
head(res[order(res$padj), ])
res[res$padj < 0.05, ]
res
head(res)
head(res[order(res$padj), ])
res[res$padj < 0.05, ]
res[res$padj < 0.05 & !is.na(res$padj), ]
res[res$padj < 0.10 & !is.na(res$padj), ]
head(res[order(res$padj), ])
res
cat(res)
head(100,res)
head(res,100)
head(res[order(res$padj), ], 100)
head(res[order(res$padj), ], 20)
?head
head(res[order(res$padj), ], 7)
countData[grep('FBgn024',rownames(countData)), ]
countData[grep('FBgn024',rownames(countData)), ]
dim(countData[grep('FBgn024',rownames(countData)), ])
res[res$padj < 0.10 & !is.na(res$padj), ]
res[res$padj < 0.8 & !is.na(res$padj), ]
?results
load("/Users/chodges/Downloads/E-MTAB-2770-atlasExperimentSummary.Rdata")
experimentSummary
experimentSummary$rnaseq
dim(experimentSummary$rnaseq)
dim(experimentSummary$rnaseq$cell_line)
experimentSummary$rnaseq$cell_line
dim(experimentSummary$rnaseq)
experimentSummary$rnaseq[1,1]
library(GRanges)
install.package('GRanges')
install.packages('GRanges')
install.packages('GenomicRanges')
install.packages("GenomicRanges")
install.packages("GenomicRanges")
install.packages("GenomicRanges")
read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', header=T)
read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', header=T, skip=4)
read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', header=T, skip=4, sep = '\t')
read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', header=T, skip=4, sep = '\t', row.names=1)
df <- read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', header=T, skip=4, sep = '\t', row.names=1, fill = T)
df <- read.table('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', sep = '\t', header=T, skip=4, row.names=1, fill = T)
?read.table
df <- read.delim('~/Downloads/E-MTAB-2770-query-results.fpkms.tsv', sep = '\t', header=T, skip=4, row.names=1, fill = T)
hist(df[df[, 2] == 'IWS1',3:936])
dim(df)
hist(df[df[, 2] == 'IWS1',3:935])
df[, 2] == 'IWS1'
hist(df[df[, 2] == 'IWS1',3:935])
hist(df[df$Gene.Name == 'IWS1',3:935])
hist(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),3:935])
df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name)
hist(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)])
df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]))
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]),100)
df <- read.delim('~/Downloads/E-MTAB-2770-query-results.tpms.tsv', sep = '\t', header=T, skip=4, row.names=1, fill = T)
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]),100)
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]),100)
dev.off()
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]),100)
as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),"KELLY..neuroblastoma")
as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),"KELLY..neuroblastoma"]
as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),"KELLY..neuroblastoma"])
hist(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]),50)
ecdf(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)]))
plot(ecdf(as.numeric(df[df$Gene.Name == 'IWS1' & !is.na(df$Gene.Name),seq(3,935)])))
geneList <- c("IWS1","PSIP1","HRP2","SPT6","TFIIS","MED1","MED26")
mat <- as.numeric(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),])
mat <- as.numeric(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)])
df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)]
mat <- as.matrix(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)])
dim(mat)
head(mat)
df$Gene.Name %in% geneList
library(pheatmap)
pheatmap(mat)
pheatmap(mat,show_rownames = F, show_colnames = F)
rmat <- cor(mat)
dim(rmat)
pheatmap(rmat,show_rownames = F, show_colnames = F)
dev.off()
rmat <- cor(t(mat))
pheatmap(rmat,show_rownames = F, show_colnames = F)
?sample()
sample.int(1000,10)
rmat <- as.matrix(df[randsamp,seq(3,935)])
mat <- as.matrix(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)])
mat2 <- rbind(rmat,mat)
rmat <- cor(t(mat2))
rmat <- as.matrix(df[randsamp,seq(3,935)])
randsamp <- sample.int(length(df$Gene.Name),10)
rmat <- as.matrix(df[randsamp,seq(3,935)])
mat <- as.matrix(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)])
mat2 <- rbind(rmat,mat)
randsamp <- sample.int(length(df$Gene.Name),10)
randmat <- as.matrix(df[randsamp,seq(3,935)])
mat <- as.matrix(df[df$Gene.Name %in% geneList & !is.na(df$Gene.Name),seq(3,935)])
mat2 <- rbind(rmat,mat)
rmat <- cor(t(mat2))
dim(rmat)
pheatmap(rmat,show_rownames = F, show_colnames = F)
rmat
?rmat
?cor
rmat <- cor(t(mat2), use='complete.obs')
pheatmap(rmat,show_rownames = F, show_colnames = F)
rmat
rmat <- cor(t(mat2), use='pairwise.complete.obs')
pheatmap(rmat,show_rownames = F, show_colnames = F)
mat <- matrix(c(0,1,1,1,1,0,0,1,1),nrow=3)
mat
cor(mat,c(0,0.5,0.1))
cor(mat,c(0,0.5,0.01))
cor(mat,c(0,0.5,0.0))
vec <- matrix(c(0,1,0),nrow=1)
cor(mat,vec
cor(mat,vec)
cor(mat,t(vec))
vec
t <- c(1.222222222,
4.08125,
3.076388889,
2.786805556,
3.2,
2.10625,
1.122916667)
s <- c(2.057142857,
1,
1.166666667,
1.142857143,
1.214285714,
1.333333333,
1.428571429)
res <- cor.test(t,s)
res
library(DESeq2)
maplot
DESeq2::maplot
plotMA
plotMA()
plotMA
DESeq2::plotMA
?DESeq2::plotMA
?res
?assay
?results
?lfcShrink
library(chromVAR)
?chromVAR
getJasparMotifs
?mathcMotifs
?matchMotifs
library(motifmatchr)
?matchMotifs
?read.delim
library(heatmap2)
library(heatmap.2)
setwd("~/Projects/Hodges/Rlib/hodgeslabR/R")
library(roxygen2)
document()
document()
library(devtools)
document()
?chromVAR::getPeaks
?chromVAR::getPeaks
?setOption
getOption("bitmapType")
setOption("bitmapType","cairo")
setOption("bitmapType","cairo")
getOption("bitmapType")
setOption("bitmapType")
options("bitmapType" = "cairo")
getOption("bitmapType")
options(bitmapType = "cairo")
getOption("bitmapType")
for(i in 1:4) { disp('hi')}
for(i in 1:4) { print('hi')}
?write.table
write_delim()
?write_delim()
foo <- as.matrix(c(1,2,3,4),ncol=2)
foo+foo
foo
foo <- as.matrix(c(1,2,3,4),ncol=2,nrow=2)
foo
foo <- matrix(c(1,2,3,4),ncol=2,nrow=2)
foo
foo+foo
mean(foo,foo)
quit()
